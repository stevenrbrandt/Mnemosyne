skipper=([ \t\n\r]|\#.*)*\b
keywords=(for|if|while|else|elif|end|fun|to|from|return)
name=(?!{-keywords}\b)[a-zA-Z]+
str = "(\\[\\\"]|[^\\"])*"
op = ({-cmp}|[-+%*/])
expr = {val}( {op} {val})?
num = [0-9]+
exp = (e[+-]?[0-9]+)
real = ([0-9]+\.[0-9]*{-exp}?|\.[0-9]+{-exp}?|[0-9]+{-exp})
fun = {name} \( {vals} \)
array = \[ {-vals} \]
import = from {str} import {args}
comprehension = \[ {expr} for {name} in {expr} to {expr} \]
pair = {expr} : {expr}
pairs = ({pair}( , {pair})*)?
struct = \{ {pairs} \}
elem = {var} \[ {expr} \]
lambda = fun \( {args} \) {body} {end}
var = {name}
val = ({lambda}|{fun}|{var}|{real}|{num}|{str}|\( {expr} \)|{array}|{elem}|{struct}|{comprehension})
qual = (atomic|regular|safe|const)
def = {qual} ({var}|{elem}) := {expr}
assignOp = [-+*/%]?=
assign=({elem}|{var}) {assignOp} {expr}
call = {name} \( {vals} \)
for = for {name} in {expr} to {expr}
while = while {expr}
whilestmt = {while} {-body} {end}
returnstmt = return {expr}
cmp = (<=|>=|==|<|>)
if = if {expr}
elif = elif {expr}
else = else
args = ({name}( , {name})*)?
vals = ({expr}( , {expr})*)?
start_fn = fun {name} \( {args} \)
end = end
ifstmt = {if} ({body} )*({elif} ({body} )*)?({else} ({body} )*)?{end}
forstmt = {for} ({-body} )*{end}
body = ({def}|{assign}|{call}|{ifstmt}|{forstmt}|{whilestmt}|{returnstmt})
fun_def = {start_fn} ({-body} )*{end}
random = {brk}
prog = ^( {def}| {fun_def}| {import})* $
