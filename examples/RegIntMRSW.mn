const n := 3 # number of threads

fun safe_wr(self,val)
    const reg := self["values"]
    for i in 0 to n-1
        reg[i] = val
    end
end

fun safe_rd(self)
    const id := ThreadID()
    const reg := self["values"]
    return reg[id-1]
end

fun mkSafeBoolMRSW(n)
    return new safe {
        "values": new safe n of false,
        "write": safe_wr,
        "read": safe_rd
    }
end

#########################################

fun reg_wr(self,val)
    const old := self["old"]
    const safev := self["safe"]
    if old != val
        safev.write(val)
        self["old"] = val
    end
end

fun reg_rd(self)
    const safev := self["safe"]
    return safev.read()
end

fun mkRegBoolMRSW(n)
    return new safe {
        "safe" : mkSafeBoolMRSW(n),
        "old" : false,
        "write" : reg_wr,
        "read" : reg_rd
    }
end

#########################################

const values := 8

fun regi_wr(self,val)
    const reg := self["reg"]
    safe f := reg[val]
    f.write(true)
    for i in 0 to values
        if i != val
            f = reg[i]
            f.write(false)
        end
    end
end

fun regi_rd(self)
    const reg := self["reg"]
    safe f := 0
    for i in 0 to values
        f = reg[i]
        if f.read()
            return i
        end
    end
    return -1
end

fun mkRegIntMRSW(n)
    const a := new safe (values+1) of none
    for i in 0 to values
        a[i] = mkRegBoolMRSW(n)
    end
    return new safe {
        "reg" : a,
        "write" : regi_wr,
        "read" : regi_rd
    }
end

#########################################

const reg := mkRegIntMRSW(n)
const tstsize := 10

fun test()
    const id := ThreadID()
    println("id: ",id)
    if id == (n-1)
       # I am the writer
       for i in 0 to tstsize
          if (i % 2) == 0
            reg.write(3)
          else
            reg.write(5)
          end
       end
    else
        # I am a reader
        safe val := 0
        for i in 0 to 2*tstsize
            val = reg.read()
            assert((val == 3) or (val == 5))
        end
    end
end

fun main()
    trace(false)
    for i in 1 to n
        spawn(test)
    end
    while NumThreads() > 1
    end
    return 0
end

