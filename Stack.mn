fun lock(self)
    const ar := self["val"]
    while CAS(ar,0,1) == false
    end
end

fun unlock(self)
    const ar := self["val"]
    ar[0] = 0
end

fun mkMutex()
    return new atomic {
        "val":new atomic [0],
        "lock":lock,
        "unlock":unlock
    }
end

fun condwait(self)
    const mutex := self["mutex"]
    const cno := self["condnum"]
    mutex.unlock()
    while cno == self["condnum"]
    end
    mutex.lock()
end

fun condnotify(self)
    const cno := self["condnum"]
    self["condnum"] = cno + 1
end

fun mkCond(m)
    return new atomic {
        "mutex":m,
        "condnum":0,
        "wait":condwait,
        "notify":condnotify
    }
end

fun push(self,v)
    const mutex := self["mutex"]
    mutex.lock()
    atomic pos := self["pos"]
    const val := self["values"]

    const empty := self["empty"]
    const full := self["full"]

    while pos == len(val)
        full.wait()
        pos = self["pos"]
    end
    assert((pos >= 0) and (pos < len(val)))
    val[pos] = v
    self["pos"] = pos + 1
    empty.notify()
    mutex.unlock()
end

fun pop(self)
    const mutex := self["mutex"]
    mutex.lock()
    atomic pos := self["pos"]-1
    const val := self["values"]

    const empty := self["empty"]
    const full := self["full"]

    while pos < 0
        empty.wait()
        pos = self["pos"]-1
    end
    assert((pos >= 0) and (pos < len(val)))

    const v := val[pos]
    self["pos"] = pos
    full.notify()

    mutex.unlock()
    return v
end

fun mkStack(cap)
    const m := mkMutex()
    return new atomic {
        "mutex":m,
        "full":mkCond(m),
        "empty":mkCond(m),
        "pos": 0,
        "values": new atomic cap of none,
        "push":push,
        "pop": pop
    }
end

const s := mkStack(2)
const lim := 20

fun pusher()
    for i in 0 to lim
        s.push(i)
    end
end

fun popper()
    for i in 0 to lim
        println("s=",s.pop())
    end
end

fun main()
    trace(false)
    println("START")
    spawn(popper)
    spawn(pusher)
    while NumThreads() > 1
    end
end
